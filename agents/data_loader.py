import pandas as pd
from crewai import Agent, Task
from models.ollama_wrapper import OllamaLLM

class DataLoader(Agent):
    def __init__(self, llm):
        super().__init__(
            name="Data Loader",
            role="Data Analyst",
            goal="Load CSV data and generate a plain-English summary of the data.",
            backstory="This agent helps non-technical users understand their data.",
            llm=llm
        )

    # Loads CSV file and returns a description generated by LLM.
    def load_and_describe(self, csv_path: str) -> str:
        df = pd.read_csv(csv_path)

        n_rows, n_cols = df.shape
        missing = df.isnull().sum().sum()
        total_values = n_rows * n_cols
        completeness_pct = 100 * (total_values - missing) / total_values

        # Build a concise summary of missingness & completeness
        missing_summary = (
            f"The dataset has {missing} missing values out of {total_values} total cells, "
            f"which means it is {completeness_pct:.2f}% complete.\n"
        )

        # Describe columns and their data types
        columns_info = ""
        for col in df.columns:
            col_type = df[col].dtype
            missing_col = df[col].isnull().sum()
            unique_vals = df[col].dropna().unique()
            unique_sample = ", ".join(map(str, unique_vals[:5]))

            # For categorical/binary columns, include unique value info
            if col_type == "object" or col_type.name == "category" or len(unique_vals) < 10:
                columns_info += (
                    f"- {col} (type: {col_type}, missing: {missing_col}): unique values include {unique_sample}\n"
                )
            else:
                columns_info += f"- {col} (type: {col_type}, missing: {missing_col})\n"

        # LLM prompt with clear instructions
        prompt = (
            f"Dataset summary:\n"
            f"- Rows: {n_rows}\n"
            f"- Columns: {n_cols}\n"
            f"{missing_summary}"
            f"Columns details:\n{columns_info}\n"
            f"Based on the above facts, provide a clear, confident, and factual plain English summary "
            f"about this dataset for a non-technical business user. Include all provided information in the response."
            f"Do not guess values; base your statements on the data provided."
        )

        # Get LLM summary
        summary = self.llm.call(prompt)
        return summary


# Example usage
# if __name__ == "__main__":
#     llm = OllamaLLM(model_name="llama3")
#     agent = DataLoader(llm)
#     description = agent.load_and_describe("data/employee_churn.csv")
#     print(description)
